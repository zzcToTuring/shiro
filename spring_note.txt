springboot版

1、搭建框架
    pom.xml文件、项目配置、application.yml，mybatis-plus等内容配置完成
    (在进行后续操作时，一定要确保此功能完善)

2、userService创建方法->根据name查询用户
    public User getUserInfoByName(String name)

3、realm配置项
    3-1 myReal
        其中包含两项自定义设置：自定义授权方法(doGetAuthorizationInfo)、自定义登录方法(doGetAuthenticationInfo)
        需要继承 AuthorizingRealm

        自定义方法：返回new SimpleAuthenticationInfo 对象，其中规定相关认证方法

    3-2 ShiroConfig：shiro相关配置
        SecurityManager：基础配置，详情见代码

        拦截器：在shiro的管控下，哪些文件能直接访问，哪些要登录后才能访问，在此文件中做配置

4、controller层访问
        创建login、main前端界面
        在controller层做好相应跳转逻辑进行处理，同时，在拦截器中配置好哪些界面能访问，达到初始springboot项目shiro认证功能

5、多个 realm 的认证策略设置
        在项目3中，创建了myReal并放入ShiroConfig中；在实际的开发中，myReal可能存在多个，验证也可能存在多个规则
        Shiro 中定义了 3 种认证策略的实现：
            AtLeastOneSuccessfulStrategy 只要有一个（或更多）的 Realm 验证成功，那么认证将视为成功
            FirstSuccessfulStrategy 第一个 Realm 验证成功，整体认证将视为成功，且后续 Realm 将被忽略
            AllSuccessfulStrategy 所有 Realm 成功，认证才视为成功
        举例(config)：
            //创建 defaultWebSecurityManager 对象
             DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager();
            //2 创建认证对象，并设置认证策略
             ModularRealmAuthenticator modularRealmAuthenticator = new ModularRealmAuthenticator();
             modularRealmAuthenticator.setAuthenticationStrategy(new AllSuccessfulStrategy());
             defaultWebSecurityManager.setAuthenticator(modularRealmAuthenticator);
            //3 封装 myRealm 集合
             List<Realm> list = new ArrayList<>();
             list.add(myRealm);
             list.add(myRealm2);
            //4 将 myRealm 存入 defaultWebSecurityManager 对象
              defaultWebSecurityManager.setRealms(list);
            //5 返回
              return defaultWebSecurityManager;

6、rememberMe与登出
    在项目中，经常会使用到记住登录状态或退出登录选项

    6-1rememberMe：
       --在ShiroConfig做好相关配置，添加rememberMe功能，同时设置好相关cookie
       --添加拦截器 definition.addPathDefinition("/**","user"); 在添加时需注意其位置
       --关于第二个参数的说明
            anon:无需认证即可访问
            authc:需要认证才可以访问
            user:点击"记住我"功能可以访问
            perms:拥有权限才能访问
            role:拥有某个角色权限才能访问
       --在controller层中添加参数，添加跳转方法，同时在界面上添加内容

    6-2：登出
        --页面上添加：<a href="/logout">登出</a>
        --拦截器添加：definition.addPathDefinition("/logout","logout"); 同时，也需要注意其位置

    注意点：
        1、浏览器测试时不能使用无痕模式(不会保存cookie)，没有rememberMe效果
        2、在addPathDefinition时，注意其位置，全局匹配的应该在最下方
        (逻辑为从上到下找，找到符合条件的进行匹配)

7、授权
    用户登录后，需要验证是否具有指定角色指定权限。Shiro也提供了方便的工具进行判断。
    这个工具就是Realm的doGetAuthorizationInfo方法进行判断。触发权限判断的有两种方式
    （1） 在页面中通过shiro:****属性判断
    （2） 在接口服务中通过注解@Requires****进行判断

    后端接口常用注解
        @RequiresAuthentication：验证用户是否登录，等同于方法subject.isAuthenticated
        @RequiresUser：验证用户是否被记忆：登录认证成功或记忆subject.isAuthenticated()为true
        @RequiresGuest：验证是否是游客的请求 此时subject.getPrincipal()为null
        @RequiresRoles：验证subject是否有相应角色，有角色访问方法，没有则会抛出异常AuthorizationException
        @RequiresPermissions：验证subject是否有相应权限，有权限访问方法，没有则会抛出异常AuthorizationException
    操作：
        1、根据后端注解，在controller中添加对应方法
        2、前端可同时添加超链接
        3、修改myReal(见myReal_role)
            角色一般只有一个，权限能拥有许多，在处理的时候注意辨别

8、异常处理
    在完成操作7后，如果没有对应的权限和角色，会展示初始界面，并在控制台爆相关异常
    此时可对异常进行捕获：PermissionsException中@ControllerAdvice注解，对异常进行处理

9、前端处理
    若角色没有相关权限，在前端界面不应该展示
    9-1：配置 Thymeleaf 与 Shiro 的整合依赖
    9-2：在shiroConfig中添加相关属性
    9-3 前端页面配置(需要加上<html lang="en" xmlns:shiro="http://www.w3.org/1999/xhtml">)
    9-4 常见标识(标识都是一对一对的，为了书写方便只展示一个)：
        <shiro:guest>：用户没有身份验证时显示相应信息，即游客访问信息
        <shiro:user>：用户已经身份验证/记住我登录后显示相应的信息

        <shiro:authenticated>：用户已经身份验证通过，即 Subject.login 登录成功，不是记住我登录的
        <shiro:notAuthenticated>：用户已经身份验证通过，即没有调用 Subject.login 进行登录，包括记住我自动登录的也属于未进行身份验证

        <shiro:hasRole name="admin">：如果当前 Subject 有角色将显示 body 体内容
        <shiro:lacksRole name="abc">：如果当前 Subject 没有角色将显示 body 体内容。
        <shiro:hasAllRoles name="admin,user">：当前 Subject需同时拥有角色 才能显示body内容
        <shiro:hasAnyRoles name="admin,user">：如果当前 Subject 有任意一个角色（或的关系）将显示 body 体内容

        <shiro:hasPermission name="xxx">：如果当前 Subject 有权限将显示 body 体内容
        <shiro:lacksPermission name="xxx">：如果当前subject没有指定权限，将会显示body内容

        <shiro:hasAllPermissions name="xxx,xxx">：当前 Subject需同时拥有权限，才能显示body内容
        <shiro:hasAnyPermission name="xxx,xxx">：如果当前 Subject 有任意一个权限将显示 body 体内容
        <shiro:principal property="xxx">：相当于subject.getPrincipals().getXxx

10 完结&文件说明
    讲述shiro框架入门及与springboot结合基础内容
    主要包括：
        1、在无框架模式使用
            --认识shiro框架
            --入门案例，创建shiroManager
            --角色、权限分配
            --加密
            --自定义realm(讲述较少，详情见springboot版)
        2、在springboot框架中使用
            --项目搭建(pom.xml文件、项目配置、application.yml，mybatis-plus等内容配置完成)
            --springboot部分：userService创建方法(方便从数据库中查询相关信息)
            --初始化shiro
                创建real配置：myReal,shiroConfig
                controller访问：mainController
                index.html页面
        3、多个 realm 的认证策略设置

        4、rememberMe 与 登出：
            --shiroConfig配置：
                ShiroConfig_cook设置rememberMe启用、cookie设置、拦截器设置
            --index页面、controller同时做相关修改
            --登出只需在拦截器中做相应配置即可

        5、角色授权、权限设置
            controller设置:在后端哪些方法不仅仅登录，还要权限：mainController_role
            PermissionsException设置：没权限跳转页面不友好，同时控制台报错，若用户没权限/认证失败展示相应内容
            myReal修改：增加权限/角色认证：myReal_role(注意其格式和要求参数)
            前端页面：
                若角色没有权限，在前端页面不应该展示，使用thymeleaf框架进行展示/隐藏处理
                (详情见index文件/note)






